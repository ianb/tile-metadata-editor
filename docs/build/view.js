// Not compatible with JSX:

/* eslint-disable no-unused-vars */

/* globals React */
export class View extends React.Component {
  render() {
    return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Controls, {
      controller: this.props.controller
    }), /*#__PURE__*/React.createElement(TileList, {
      controller: this.props.controller,
      tileset: this.props.tileset
    }));
  }

}

class Controls extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      saving: false
    };
  }

  render() {
    return /*#__PURE__*/React.createElement("fieldset", null, /*#__PURE__*/React.createElement("legend", null, "Controls"), /*#__PURE__*/React.createElement("button", {
      type: "button",
      onClick: this.onSave.bind(this)
    }, this.state.saving ? "Saved!" : "Save"), /*#__PURE__*/React.createElement("label", {
      htmlFor: "upload"
    }, "Import:", /*#__PURE__*/React.createElement("input", {
      id: "upload",
      type: "file",
      ref: this.fileRef,
      onInput: this.onInput.bind(this),
      multiple: "1"
    })));
  }

  onSave() {
    this.props.controller.save();
    this.setState({
      saving: true
    });
    setTimeout(() => {
      this.setState({
        saving: false
      });
    }, 2000);
  }

  onInput(event) {
    this.props.controller.addFiles(event.target.files);
  }

}

class TileList extends React.Component {
  render() {
    const result = [];
    const grids = this.props.tileset.tileGrids();

    for (const grid of grids) {
      result.push( /*#__PURE__*/React.createElement(TileGrid, {
        sourceFilename: grid.sourceFilename,
        grid: grid.grid,
        controller: this.props.controller,
        key: grid.sourceFilename
      }));
    }

    return /*#__PURE__*/React.createElement("div", null, result);
  }

}

class TileGrid extends React.Component {
  render() {
    const tableRows = [];

    for (let y = 0; y < this.props.grid.length; y++) {
      const row = [];

      for (let x = 0; x < this.props.grid[y].length; x++) {
        const tile = this.props.grid[y][x];

        if (!tile) {
          row.push( /*#__PURE__*/React.createElement("td", {
            key: x
          }));
        } else {
          row.push( /*#__PURE__*/React.createElement("td", {
            key: x
          }, /*#__PURE__*/React.createElement(Tile, {
            tile: tile,
            controller: this.props.controller
          })));
        }
      }

      tableRows.push( /*#__PURE__*/React.createElement("tr", {
        key: y
      }, row));
    }

    return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("div", null, this.props.sourceFilename), /*#__PURE__*/React.createElement("table", {
      className: "tiles"
    }, tableRows));
  }

}

class Tile extends React.Component {
  render() {
    return /*#__PURE__*/React.createElement("img", {
      src: this.props.tile.imageUrl,
      alt: `Tile ${this.props.tile.id}`
    });
  }

}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3ZpZXcuanN4Il0sIm5hbWVzIjpbIlZpZXciLCJSZWFjdCIsIkNvbXBvbmVudCIsInJlbmRlciIsInByb3BzIiwiY29udHJvbGxlciIsInRpbGVzZXQiLCJDb250cm9scyIsImNvbnN0cnVjdG9yIiwic3RhdGUiLCJzYXZpbmciLCJvblNhdmUiLCJiaW5kIiwiZmlsZVJlZiIsIm9uSW5wdXQiLCJzYXZlIiwic2V0U3RhdGUiLCJzZXRUaW1lb3V0IiwiZXZlbnQiLCJhZGRGaWxlcyIsInRhcmdldCIsImZpbGVzIiwiVGlsZUxpc3QiLCJyZXN1bHQiLCJncmlkcyIsInRpbGVHcmlkcyIsImdyaWQiLCJwdXNoIiwic291cmNlRmlsZW5hbWUiLCJUaWxlR3JpZCIsInRhYmxlUm93cyIsInkiLCJsZW5ndGgiLCJyb3ciLCJ4IiwidGlsZSIsIlRpbGUiLCJpbWFnZVVybCIsImlkIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQTs7QUFDQTtBQUVBLE9BQU8sTUFBTUEsSUFBTixTQUFtQkMsS0FBSyxDQUFDQyxTQUF6QixDQUFtQztBQUN4Q0MsRUFBQUEsTUFBTSxHQUFHO0FBQ1Asd0JBQ0UsOENBQ0Usb0JBQUMsUUFBRDtBQUFVLE1BQUEsVUFBVSxFQUFFLEtBQUtDLEtBQUwsQ0FBV0M7QUFBakMsTUFERixlQUVFLG9CQUFDLFFBQUQ7QUFDRSxNQUFBLFVBQVUsRUFBRSxLQUFLRCxLQUFMLENBQVdDLFVBRHpCO0FBRUUsTUFBQSxPQUFPLEVBQUUsS0FBS0QsS0FBTCxDQUFXRTtBQUZ0QixNQUZGLENBREY7QUFTRDs7QUFYdUM7O0FBYzFDLE1BQU1DLFFBQU4sU0FBdUJOLEtBQUssQ0FBQ0MsU0FBN0IsQ0FBdUM7QUFDckNNLEVBQUFBLFdBQVcsQ0FBQ0osS0FBRCxFQUFRO0FBQ2pCLFVBQU1BLEtBQU47QUFDQSxTQUFLSyxLQUFMLEdBQWE7QUFBRUMsTUFBQUEsTUFBTSxFQUFFO0FBQVYsS0FBYjtBQUNEOztBQUNEUCxFQUFBQSxNQUFNLEdBQUc7QUFDUCx3QkFD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QUMsSUFBRDtBQUFNLFlBQUEsSUFBSSxFQUFFQyxJQUFaO0FBQWtCLFlBQUEsVUFBVSxFQUFFLEtBQUsvQixLQUFMLENBQVdDO0FBQXpDLFlBREYsQ0FERjtBQUtEO0FBQ0Y7O0FBQ0R5QixNQUFBQSxTQUFTLENBQUNILElBQVYsZUFBZTtBQUFJLFFBQUEsR0FBRyxFQUFFSTtBQUFULFNBQWFFLEdBQWIsQ0FBZjtBQUNEOztBQUNELHdCQUNFLDhDQUNFLGlDQUFNLEtBQUs3QixLQUFMLENBQVd3QixjQUFqQixDQURGLGVBRUU7QUFBTyxNQUFBLFNBQVMsRUFBQztBQUFqQixPQUEwQkUsU0FBMUIsQ0FGRixDQURGO0FBTUQ7O0FBekJvQzs7QUE0QnZDLE1BQU1NLElBQU4sU0FBbUJuQyxLQUFLLENBQUNDLFNBQXpCLENBQW1DO0FBQ2pDQyxFQUFBQSxNQUFNLEdBQUc7QUFDUCx3QkFDRTtBQUFLLE1BQUEsR0FBRyxFQUFFLEtBQUtDLEtBQUwsQ0FBVytCLElBQVgsQ0FBZ0JFLFFBQTFCO0FBQW9DLE1BQUEsR0FBRyxFQUFHLFFBQU8sS0FBS2pDLEtBQUwsQ0FBVytCLElBQVgsQ0FBZ0JHLEVBQUc7QUFBcEUsTUFERjtBQUdEOztBQUxnQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE5vdCBjb21wYXRpYmxlIHdpdGggSlNYOlxuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbi8qIGdsb2JhbHMgUmVhY3QgKi9cblxuZXhwb3J0IGNsYXNzIFZpZXcgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXY+XG4gICAgICAgIDxDb250cm9scyBjb250cm9sbGVyPXt0aGlzLnByb3BzLmNvbnRyb2xsZXJ9IC8+XG4gICAgICAgIDxUaWxlTGlzdFxuICAgICAgICAgIGNvbnRyb2xsZXI9e3RoaXMucHJvcHMuY29udHJvbGxlcn1cbiAgICAgICAgICB0aWxlc2V0PXt0aGlzLnByb3BzLnRpbGVzZXR9XG4gICAgICAgIC8+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cbmNsYXNzIENvbnRyb2xzIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHsgc2F2aW5nOiBmYWxzZSB9O1xuICB9XG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGZpZWxkc2V0PlxuICAgICAgICA8bGVnZW5kPkNvbnRyb2xzPC9sZWdlbmQ+XG4gICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIG9uQ2xpY2s9e3RoaXMub25TYXZlLmJpbmQodGhpcyl9PlxuICAgICAgICAgIHt0aGlzLnN0YXRlLnNhdmluZyA/IFwiU2F2ZWQhXCIgOiBcIlNhdmVcIn1cbiAgICAgICAgPC9idXR0b24+XG4gICAgICAgIDxsYWJlbCBodG1sRm9yPVwidXBsb2FkXCI+XG4gICAgICAgICAgSW1wb3J0OlxuICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgaWQ9XCJ1cGxvYWRcIlxuICAgICAgICAgICAgdHlwZT1cImZpbGVcIlxuICAgICAgICAgICAgcmVmPXt0aGlzLmZpbGVSZWZ9XG4gICAgICAgICAgICBvbklucHV0PXt0aGlzLm9uSW5wdXQuYmluZCh0aGlzKX1cbiAgICAgICAgICAgIG11bHRpcGxlPVwiMVwiXG4gICAgICAgICAgLz5cbiAgICAgICAgPC9sYWJlbD5cbiAgICAgIDwvZmllbGRzZXQ+XG4gICAgKTtcbiAgfVxuXG4gIG9uU2F2ZSgpIHtcbiAgICB0aGlzLnByb3BzLmNvbnRyb2xsZXIuc2F2ZSgpO1xuICAgIHRoaXMuc2V0U3RhdGUoeyBzYXZpbmc6IHRydWUgfSk7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgc2F2aW5nOiBmYWxzZSB9KTtcbiAgICB9LCAyMDAwKTtcbiAgfVxuXG4gIG9uSW5wdXQoZXZlbnQpIHtcbiAgICB0aGlzLnByb3BzLmNvbnRyb2xsZXIuYWRkRmlsZXMoZXZlbnQudGFyZ2V0LmZpbGVzKTtcbiAgfVxufVxuXG5jbGFzcyBUaWxlTGlzdCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICBjb25zdCBncmlkcyA9IHRoaXMucHJvcHMudGlsZXNldC50aWxlR3JpZHMoKTtcbiAgICBmb3IgKGNvbnN0IGdyaWQgb2YgZ3JpZHMpIHtcbiAgICAgIHJlc3VsdC5wdXNoKFxuICAgICAgICA8VGlsZUdyaWRcbiAgICAgICAgICBzb3VyY2VGaWxlbmFtZT17Z3JpZC5zb3VyY2VGaWxlbmFtZX1cbiAgICAgICAgICBncmlkPXtncmlkLmdyaWR9XG4gICAgICAgICAgY29udHJvbGxlcj17dGhpcy5wcm9wcy5jb250cm9sbGVyfVxuICAgICAgICAgIGtleT17Z3JpZC5zb3VyY2VGaWxlbmFtZX1cbiAgICAgICAgLz5cbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiA8ZGl2PntyZXN1bHR9PC9kaXY+O1xuICB9XG59XG5cbmNsYXNzIFRpbGVHcmlkIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHRhYmxlUm93cyA9IFtdO1xuICAgIGZvciAobGV0IHkgPSAwOyB5IDwgdGhpcy5wcm9wcy5ncmlkLmxlbmd0aDsgeSsrKSB7XG4gICAgICBjb25zdCByb3cgPSBbXTtcbiAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgdGhpcy5wcm9wcy5ncmlkW3ldLmxlbmd0aDsgeCsrKSB7XG4gICAgICAgIGNvbnN0IHRpbGUgPSB0aGlzLnByb3BzLmdyaWRbeV1beF07XG4gICAgICAgIGlmICghdGlsZSkge1xuICAgICAgICAgIHJvdy5wdXNoKDx0ZCBrZXk9e3h9PjwvdGQ+KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByb3cucHVzaChcbiAgICAgICAgICAgIDx0ZCBrZXk9e3h9PlxuICAgICAgICAgICAgICA8VGlsZSB0aWxlPXt0aWxlfSBjb250cm9sbGVyPXt0aGlzLnByb3BzLmNvbnRyb2xsZXJ9IC8+XG4gICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRhYmxlUm93cy5wdXNoKDx0ciBrZXk9e3l9Pntyb3d9PC90cj4pO1xuICAgIH1cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdj5cbiAgICAgICAgPGRpdj57dGhpcy5wcm9wcy5zb3VyY2VGaWxlbmFtZX08L2Rpdj5cbiAgICAgICAgPHRhYmxlIGNsYXNzTmFtZT1cInRpbGVzXCI+e3RhYmxlUm93c308L3RhYmxlPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuXG5jbGFzcyBUaWxlIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8aW1nIHNyYz17dGhpcy5wcm9wcy50aWxlLmltYWdlVXJsfSBhbHQ9e2BUaWxlICR7dGhpcy5wcm9wcy50aWxlLmlkfWB9IC8+XG4gICAgKTtcbiAgfVxufVxuIl19