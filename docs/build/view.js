/* eslint-disable jsx-a11y/no-access-key */

/* eslint-disable jsx-a11y/no-static-element-interactions */

/* eslint-disable jsx-a11y/click-events-have-key-events */

/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */
// Not compatible with JSX:

/* eslint-disable no-unused-vars */

/* globals React */
export class View extends React.Component {
  render() {
    return /*#__PURE__*/React.createElement("div", {
      style: {
        height: "100vh",
        width: "100vw",
        display: "grid",
        gridTemplateColumns: "1fr 2fr",
        gridTemplateRows: "1fr 1fr"
      }
    }, /*#__PURE__*/React.createElement("div", {
      style: {
        gridRowStart: "1",
        gridRowEnd: "span 2",
        overflow: "scroll"
      }
    }, /*#__PURE__*/React.createElement(Controls, {
      controller: this.props.controller
    }), /*#__PURE__*/React.createElement("div", {
      style: {
        overflow: "scroll"
      }
    }, /*#__PURE__*/React.createElement(TileList, {
      clickTileStatus: this.props.clickTileStatus,
      controller: this.props.controller,
      tileset: this.props.tileset
    }))), /*#__PURE__*/React.createElement("div", {
      style: {
        gridColumnStart: "2",
        gridRowStart: "1"
      }
    }, /*#__PURE__*/React.createElement(TileEditor, {
      tile: this.props.editTile1,
      tileset: this.props.tileset,
      controller: this.props.controller,
      primary: true
    })), /*#__PURE__*/React.createElement("div", {
      style: {
        gridColumnStart: "2",
        gridRowStart: "2"
      }
    }, /*#__PURE__*/React.createElement(TileEditor, {
      tile: this.props.editTile2,
      tileset: this.props.tileset,
      controller: this.props.controller,
      primary: false
    })));
  }

}

class Controls extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      saving: false
    };
  }

  render() {
    return /*#__PURE__*/React.createElement("fieldset", null, /*#__PURE__*/React.createElement("legend", null, "Controls"), /*#__PURE__*/React.createElement("button", {
      type: "button",
      onClick: this.onSave.bind(this)
    }, this.state.saving ? "Saved!" : "Save"), /*#__PURE__*/React.createElement("label", null, "Import:", /*#__PURE__*/React.createElement("input", {
      type: "file",
      ref: this.fileRef,
      onInput: this.onInput.bind(this),
      multiple: "1"
    })));
  }

  onSave() {
    this.props.controller.save();
    this.setState({
      saving: true
    });
    setTimeout(() => {
      this.setState({
        saving: false
      });
    }, 2000);
  }

  onInput(event) {
    this.props.controller.addFiles(event.target.files);
  }

}

class TileList extends React.Component {
  render() {
    const result = [];
    const grids = this.props.tileset.tileGrids();

    for (const grid of grids) {
      result.push( /*#__PURE__*/React.createElement(TileGrid, {
        sourceFilename: grid.sourceFilename,
        grid: grid.grid,
        controller: this.props.controller,
        key: grid.sourceFilename
      }));
    }

    return /*#__PURE__*/React.createElement("div", null, this.props.clickTileStatus ? /*#__PURE__*/React.createElement("div", {
      onClick: this.onClickStatus.bind(this)
    }, "On click: ", this.props.clickTileStatus) : null, /*#__PURE__*/React.createElement(SpecialTiles, {
      controller: this.props.controller,
      tileset: this.props.tileset
    }), result);
  }

  onClickStatus() {
    this.props.controller.editTile(null);
  }

}

class SpecialTiles extends React.Component {
  render() {
    const examples = [];

    for (const e of this.props.tileset.examples()) {
      examples.push( /*#__PURE__*/React.createElement("li", {
        onClick: () => this.props.controller.editGroup(e.group, e.tile)
      }, /*#__PURE__*/React.createElement("img", {
        src: e.tile.imageUrl,
        alt: ""
      }), "Group ", e.group));
    }

    return /*#__PURE__*/React.createElement("ul", {
      className: "special-tiles"
    }, /*#__PURE__*/React.createElement("li", {
      onClick: () => this.props.controller.editEmptyTile()
    }, /*#__PURE__*/React.createElement("img", {
      src: "/images/delete.png",
      alt: "delete"
    }), "Delete / blank"), examples);
  }

}

class TileGrid extends React.Component {
  render() {
    const tableRows = [];

    for (let y = 0; y < this.props.grid.length; y++) {
      const row = [];

      for (let x = 0; x < this.props.grid[y].length; x++) {
        const tile = this.props.grid[y][x];

        if (!tile) {
          row.push( /*#__PURE__*/React.createElement("td", {
            key: x
          }));
        } else {
          row.push( /*#__PURE__*/React.createElement("td", {
            key: x
          }, /*#__PURE__*/React.createElement(Tile, {
            tile: tile,
            controller: this.props.controller
          })));
        }
      }

      tableRows.push( /*#__PURE__*/React.createElement("tr", {
        key: y
      }, row));
    }

    return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("div", null, this.props.sourceFilename, " ", /*#__PURE__*/React.createElement("button", {
      type: "button",
      onClick: this.deleteSource.bind(this)
    }, "\xD7")), /*#__PURE__*/React.createElement("table", {
      className: "tiles"
    }, tableRows));
  }

  deleteSource() {
    if (!window.confirm("Delete this entire set of tiles?")) {
      return;
    }

    this.props.controller.deleteSource(this.props.sourceFilename);
  }

}

class Tile extends React.Component {
  render() {
    return /*#__PURE__*/React.createElement(TileImage, {
      tile: this.props.tile,
      onClick: this.onClick.bind(this)
    });
  }

  onClick() {
    this.props.controller.editTile(this.props.tile);
  }

}

class TileImage extends React.Component {
  render() {
    const anim = this.props.tile.animateUrls;
    const main = this.props.tile.imageUrl;

    if (!anim) {
      return /*#__PURE__*/React.createElement("img", {
        className: this.props.className,
        src: main,
        alt: `Tile ${this.props.tile.id}`,
        onClick: this.props.onClick
      });
    }

    const images = [main].concat(anim);
    return /*#__PURE__*/React.createElement("div", {
      className: `anim-tiles ${this.props.className || ""}`,
      onClick: this.props.onClick
    }, images.map((url, index) => {
      return /*#__PURE__*/React.createElement("img", {
        style: this.props.style,
        src: url,
        key: index,
        alt: `Tile ${index + 1} ${this.props.tile.id}`,
        className: `image-${index + 1}-of-${images.length}`
      });
    }));
  }

}

class TileEditor extends React.Component {
  render() {
    const tile = this.props.tile;
    const tileset = this.props.tileset;

    if (!tile) {
      return /*#__PURE__*/React.createElement("div", null, "Click to edit a tile");
    }

    function radioClass(objectType) {
      if (objectType === null && !tile.objectType || tile.objectType === objectType) {
        return "selected";
      }

      return null;
    }

    return /*#__PURE__*/React.createElement("fieldset", null, /*#__PURE__*/React.createElement("legend", null, "Tile editor ", tile.id), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(TileImage, {
      tile: tile,
      className: "x2"
    }), /*#__PURE__*/React.createElement("button", {
      type: "button",
      onClick: this.addAnimation.bind(this)
    }, "+anim"), /*#__PURE__*/React.createElement("label", null, "Title:", /*#__PURE__*/React.createElement("input", {
      type: "text",
      defaultValue: tile.title,
      onKeyUp: this.editTitle.bind(this)
    })), /*#__PURE__*/React.createElement("label", null, "Group:", /*#__PURE__*/React.createElement("input", {
      type: "text",
      value: tile.specificGroup || "",
      onChange: this.editGroup.bind(this)
    })), /*#__PURE__*/React.createElement("label", null, "Example:", /*#__PURE__*/React.createElement("input", {
      type: "checkbox",
      checked: tile.isExample,
      onChange: this.editExample.bind(this)
    })), /*#__PURE__*/React.createElement("button", {
      type: "button",
      onClick: this.deleteTile.bind(this),
      accessKey: this.props.primary ? "d" : null
    }, "Delete"), /*#__PURE__*/React.createElement("div", {
      className: "radios"
    }, "Type:", /*#__PURE__*/React.createElement("label", {
      className: radioClass(null)
    }, /*#__PURE__*/React.createElement("input", {
      type: "radio",
      name: `objectType-${tile.id}`,
      value: "none",
      checked: !tile.objectType,
      onChange: this.onTypeChange.bind(this)
    }), "None"), /*#__PURE__*/React.createElement("label", {
      className: radioClass("ground")
    }, /*#__PURE__*/React.createElement("input", {
      type: "radio",
      name: `objectType-${tile.id}`,
      value: "ground",
      checked: tile.objectType === "ground",
      onChange: this.onTypeChange.bind(this)
    }), "Ground"), /*#__PURE__*/React.createElement("label", {
      className: radioClass("decor")
    }, /*#__PURE__*/React.createElement("input", {
      type: "radio",
      name: `objectType-${tile.id}`,
      value: "decor",
      checked: tile.objectType === "decor",
      onChange: this.onTypeChange.bind(this)
    }), "Decor"), /*#__PURE__*/React.createElement("label", {
      className: radioClass("object")
    }, /*#__PURE__*/React.createElement("input", {
      type: "radio",
      name: `objectType-${tile.id}`,
      value: "object",
      checked: tile.objectType === "object",
      onChange: this.onTypeChange.bind(this)
    }), "Object"))), /*#__PURE__*/React.createElement("hr", null), /*#__PURE__*/React.createElement("div", null, [0, 1, 2, 3].map(i => /*#__PURE__*/React.createElement(TileDirections, {
      tile: tile,
      tileset: tileset,
      controller: this.props.controller,
      count: i,
      key: i
    }))));
  }

  editTitle(event) {
    this.props.tile.title = event.target.value;
  }

  editGroup(event) {
    this.props.tile.specificGroup = event.target.value;
    this.props.controller.render();
  }

  editExample(event) {
    this.props.tile.isExample = event.target.checked;
    this.props.controller.render();
  }

  deleteTile() {
    if (!window.confirm("Really delete?")) {
      return;
    }

    this.props.tile.tileset.deleteTile(this.props.tile);
    this.props.controller.render();
  }

  addAnimation() {
    this.props.controller.addAnimation(this.props.tile);
  }

  onTypeChange(event) {
    let value = event.target.value;

    if (value === "none") {
      value = null;
    }

    this.props.tile.objectType = value;
    this.props.controller.render();
  }

}

class TileDirections extends React.Component {
  render() {
    const tile = this.props.tile;
    const count = this.props.count;
    const left = tile.getDirection("left", count);
    const right = tile.getDirection("right", count);
    const top = tile.getDirection("top", count);
    const bottom = tile.getDirection("bottom", count);

    function tileImg(tile) {
      return /*#__PURE__*/React.createElement("img", {
        src: tile.imageUrl,
        className: tile.groupId ? "group-tile" : null,
        alt: ""
      });
    }

    return /*#__PURE__*/React.createElement("div", {
      style: {
        display: "inline-grid",
        gridTemplateColumns: "32px 32px 32px",
        gridTemplateRows: "32px 32px 32px"
      }
    }, /*#__PURE__*/React.createElement("div", {
      style: {
        gridColumnStart: 2,
        gridRowStart: 1
      },
      className: "tile-dir",
      onClick: this.editDirection.bind(this, "top")
    }, top ? tileImg(top) : /*#__PURE__*/React.createElement("img", {
      src: "images/dir-up.png",
      alt: "add up tile"
    })), /*#__PURE__*/React.createElement("div", {
      style: {
        gridColumnStart: 1,
        gridRowStart: 2
      },
      className: "tile-dir",
      onClick: this.editDirection.bind(this, "left")
    }, left ? tileImg(left) : /*#__PURE__*/React.createElement("img", {
      src: "images/dir-left.png",
      alt: "add left tile"
    })), /*#__PURE__*/React.createElement("div", {
      style: {
        gridColumnStart: 2,
        gridGrowStart: 2
      }
    }, /*#__PURE__*/React.createElement("img", {
      src: tile.imageUrl,
      alt: "Main tile"
    })), /*#__PURE__*/React.createElement("div", {
      style: {
        gridColumnStart: 3,
        gridRowStart: 2
      },
      className: "tile-dir",
      onClick: this.editDirection.bind(this, "right")
    }, right ? tileImg(right) : /*#__PURE__*/React.createElement("img", {
      src: "images/dir-right.png",
      alt: "add right tile"
    })), /*#__PURE__*/React.createElement("div", {
      style: {
        gridColumnStart: 2,
        gridRowStart: 3
      },
      className: "tile-dir",
      onClick: this.editDirection.bind(this, "bottom")
    }, bottom ? tileImg(bottom) : /*#__PURE__*/React.createElement("img", {
      src: "images/dir-down.png",
      alt: "add down tile"
    })));
  }

  editDirection(direction) {
    this.props.controller.editDirection(this.props.tile, direction, this.props.count);
  }

}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,